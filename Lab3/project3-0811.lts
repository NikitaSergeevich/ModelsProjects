//Reflection - we do not see actual state of an object and see only the actions

const LineNum = 2
range RangeLine = 1..LineNum
const MaxFluid = 10
range Volume = 0..MaxFluid

const Normal = 0
const MedicineEnded = 1
const SystemCheckError = 2
//const Pinched = 2
//const Plugged = 3
range ErrorTypes = Normal..SystemCheckError

const NotSet = 0
range Rate = NotSet..2

//
// States of power source
// Assumption: 20% of battery is enough for 4 hours of working 
// (according to requirements from 
// "Generic Infusion Pump Hazard Analysis and Safety Requirements")
//
const Electricity = 0 	// Pump uses AC power
const Battery = 1 	// Battery mode
range PowerMode = Electricity .. Battery

const FullBattery = 0 	// Pump uses battery with charge is enough for more than 4 hours
const LowBattery = 1 	// Pump uses battery with charge is enough for less than 4 hours
const EmptyBattery = 2 	// Battery is empty
range BatteryMode = FullBattery .. EmptyBattery


BATTERY = B[FullBattery],
B[s:BatteryMode]=
(//LowBattery
when (s == LowBattery) charge -> B[FullBattery]
|when (s == LowBattery) discharge -> B[EmptyBattery]
|when (s == LowBattery) changeBattery -> B[FullBattery]
//EmptyBattery
|when (s == EmptyBattery) charge -> B[LowBattery]
|when (s == EmptyBattery) discharge -> B[EmptyBattery]
|when (s == EmptyBattery) change_battery -> B[FullBattery]
//FullBattery
|when (s == FullBattery) charge -> B[FullBattery]
|when (s == FullBattery) discharge -> B[LowBattery]
|when (s == FullBattery) changeBattery -> B[FullBattery]
).

// Add state power off/on
// !!!What is with cashe? mediceineEnded -> systemError and we don't know. 
//Assumption - we can only have one error in "cache"
PUMP = P[Electricity][Normal],	//initial state

P[p:PowerMode][e:ErrorTypes] = (
// Change power mode
when (p==Electricity) plugOff-> P[Battery][e]
|when (p==Battery) plugIn-> P[Electricity][e]
// Error ocurence
|when (e==Normal) medicineEnded -> P[p][MedicineEnded]
|when (e==Normal) systemCheckError -> P[p][SystemCheckError] //maybe something with synchronization
|when (e==MedicineEnded) alarm -> refill -> P[p][Normal]
)
. 


//Assumption - refill is made only to max
//Assumption - if rate equals 3, we will not send only 2
// Refill line1 after medicine ended kills ability to refill line 2
LINE = L[MaxFluid][NotSet],
L[f:Volume][r:Rate] = (
refill -> L[MaxFluid][r]
|when(f > r-1 && r > 0) dispense -> L[f-r][r]
|when(f < r && r > 0) medicineEnded -> refill -> L[MaxFluid][r]
|setRate[rNew:Rate] -> L[f][rNew] 
).

||EVERYTHING = (PUMP || line[RangeLine]:LINE || BATTERY || SAFE_DISPENCE) 
/{forall[i:RangeLine]  
{line[i].medicineEnded/medicineEnded,
line[i].refill/refill
}
}.

property SAFE_DISPENCE
     =(forall[i:RangeLine] {line[i].setRate->line[i].dispense -> SAFE_DISPENCE}).


//LINE = (set_rate -> enter_value -> connect_set -> purge_air -> lock_line -> PUSH_FLUIDS[A]),
//PUSH_FLUIDS[v:FluidRange] = (when(v>0)dispense -> PUSH_FLUIDS[v-1]|when(v==0)alarm -> PUSH_FLUIDS[v]).



//||PUMPWORK  = (line[RangeLine]:LINE).

