const LineNum = 2
range RangeLine = 1..LineNum
const MaxFluid = 10
range Volume = 0..MaxFluid

const Normal = 0
const MedicineEnded = 1
const SystemCheckError = 2
//const Pinched = 2
//const Plugged = 3
range ErrorTypes = Normal..SystemCheckError

const MaxRate = 2
const NotSet = 0
range Rate = NotSet..MaxRate


const Off = 0
const On = 1
range OnOff = Off..On



//
// States of power source
// Assumption: 20% of battery is enough for 4 hours of working 
// (according to requirements from 
// "Generic Infusion Pump Hazard Analysis and Safety Requirements")
//
const Electricity = 0 	// Pump uses AC power
const Battery = 1 	// Battery mode
range PowerMode = Electricity .. Battery

const FullBattery = 0 	// Pump uses battery with charge is enough for more than 4 hours
const LowBattery = 1 	// Pump uses battery with charge is enough for less than 4 hours
const EmptyBattery = 2 	// Battery is empty
range BatteryMode = FullBattery .. EmptyBattery


BATTERY = B[FullBattery],
B[s:BatteryMode]=
(//LowBattery
when (s == LowBattery) charge -> B[FullBattery]
|when (s == LowBattery) discharge -> B[EmptyBattery]
|when (s == LowBattery) changeBattery -> B[FullBattery]
//EmptyBattery
|when (s == EmptyBattery) charge -> B[LowBattery]
|when (s == EmptyBattery) discharge -> B[EmptyBattery]
|when (s == EmptyBattery) change_battery -> B[FullBattery]
//FullBattery
|when (s == FullBattery) charge -> B[FullBattery]
|when (s == FullBattery) discharge -> B[LowBattery]
|when (s == FullBattery) changeBattery -> B[FullBattery]
).

// Add state power off/on
// !!!What is with cashe? mediceineEnded -> systemError and we don't know. 
//Assumption - we can only have one error in "cache"

PUMP = P[Off][Electricity][Normal],	//initial state
P[state:OnOff][p:PowerMode][e:ErrorTypes] = (
// Change power mode
when (p==Electricity) plugOff-> P[state][Battery][e]
|when (p==Battery) plugIn-> P[state][Electricity][e]
// Error ocurence
|when (e==Normal) medicineEnded -> P[state][p][MedicineEnded]
|when (e==Normal) systemCheckError -> P[state][p][SystemCheckError] //maybe something with synchronization
|when (e==MedicineEnded) alarm -> refill -> P[state][p][Normal]
//OnOff
|when (state==On) turnOff -> P[Off][p][MedicineEnded]
|when (state==Off) turnOn -> P[On][p][MedicineEnded]
)
. 


//Assumption - refill is made only to max
LINE = L[MaxFluid],
L[f:Volume] = (
refill -> L[MaxFluid]
|when(f > 0) dispense -> L[f-1]
|when(f == 0) dispense -> medicineEnded -> refill -> L[MaxFluid]
).

||EVERYTHING = (PUMP || line[1..2]:LINE || BATTERY|| SAFE_DISPENCE).

// Safety property
property SAFE_DISPENCE    
=(line[i:RangeLine].medicineEnded->alarm ->SAFE_DISPENCE).

// ASK TAs
//=(line[i:RangeLine].setRate[1..MaxRate]->line[i].dispense -> SAFE_DISPENCE).
//=(line[i:RangeLine].medicineEnded->alarm -> line[i].refill  ->SAFE_DISPENCE).

// Liveness property
//assert FINITE = (dispense -> <>

