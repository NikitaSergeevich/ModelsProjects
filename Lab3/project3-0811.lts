const LineNum = 2
range RangeLine = 1..LineNum

const EmptyBattery = 0 	// Battery is empty
const LowBattery = 1 	// Pump uses battery with charge is enough for less than 4 hours
const FullBattery = 2 	// Pump uses battery with charge is enough for more than 4 hours
range BatteryMode =  EmptyBattery..FullBattery


//
// States of power source
// Assumption: 20% of battery is enough for 4 hours of working 
// (according to requirements from 
// "Generic Infusion Pump Hazard Analysis and Safety Requirements")
//
const Electricity = 0 	// Pump uses AC power
const Battery = 1 	// Battery mode
range PowerMode = Electricity .. Battery

//Pump on/off
const Off = 0
const On = 1
range OnOff = Off..On

PUMP = TURNEDOFF[Battery][FullBattery],  //initial state

TURNEDOFF[p:PowerMode][b:BatteryMode] = 
(when (p==Electricity || b > 0) turnOn -> P[p][b]
|when (p==Electricity) plugOff -> TURNEDOFF[Battery][b]
|when (p==Battery) plugIn -> TURNEDOFF[Electricity][b]

//LowBattery
|when (p==Electricity && b == LowBattery) charge -> TURNEDOFF[p][LowBattery]
|when (p==Battery && b == LowBattery) discharge -> TURNEDOFF[p][EmptyBattery]
|when (b == LowBattery) changeBattery ->  TURNEDOFF[p][FullBattery]
//EmptyBattery
|when (p==Electricity && b == EmptyBattery) charge ->  TURNEDOFF[p][LowBattery]
|when (b == EmptyBattery) changeBattery ->  TURNEDOFF[p][FullBattery]
//FullBattery
|when (p==Electricity && b == FullBattery) charge ->  TURNEDOFF[p][FullBattery]
|when (p==Battery && b == FullBattery) discharge ->  TURNEDOFF[p][LowBattery]
|when (b == FullBattery) changeBattery ->  TURNEDOFF[p][FullBattery]
),

P[p:PowerMode][b:BatteryMode] = (
// Change power mode
when (p==Electricity && b == EmptyBattery) plugOffToEmptyBattery -> TURNEDOFF[p][b]
|when (p==Electricity && b != EmptyBattery) plugOff -> P[Battery][b]
|when (p==Battery) plugIn-> P[Electricity][b]
//OnOff. Different actions in order to make share actions
|turnOff -> TURNEDOFF[p][b]
//LowBattery
|when (p==Electricity && b == LowBattery) charge -> P[p][LowBattery]
|when (p==Battery && b == LowBattery) dischargedFully  -> TURNEDOFF[p][EmptyBattery]
|when (b == LowBattery) changeBattery ->  P[p][FullBattery]
//EmptyBattery
|when (p==Electricity && b == EmptyBattery) charge ->  P[p][LowBattery]
|when (b == EmptyBattery) changeBattery ->  P[p][FullBattery]
//FullBattery
|when (p==Electricity && b == FullBattery) charge ->  P[p][FullBattery]
|when (p!=Electricity && b == FullBattery) discharge ->  P[p][LowBattery]
|when (b == FullBattery) changeBattery ->  P[p][FullBattery]
)
. 


//Number of errors which can occur in the line
const NoErrors = 1
const MaxErrors = 4
range ErrorsLine = NoErrors..MaxErrors


ALARMMEDICINE = (turnOn -> SILENCEALARMMEDICINE),
SILENCEALARMMEDICINE = (errorMedicine -> LOUDALARMMEDICINE[1]
|turnOff -> ALARMMEDICINE
|dischargedFully -> ALARMMEDICINE
|plugOffToEmptyBattery -> ALARMMEDICINE
 ),
LOUDALARMMEDICINE[e:ErrorsLine] = (
when (e<MaxErrors) errorMedicine -> LOUDALARMMEDICINE[e+1]
|when (e>1) reduceErrorMedicine -> LOUDALARMMEDICINE[e-1]
|when (e==1) reduceErrorMedicine -> SILENCEALARMMEDICINE
|turnOff -> ALARMMEDICINE
|dischargedFully -> ALARMMEDICINE
|plugOffToEmptyBattery -> ALARMMEDICINE).

ALARMPINCHED = (turnOn -> SILENCEALARMPINCHED),
SILENCEALARMPINCHED = (errorPinched -> LOUDALARMPINCHED[1]
|turnOff -> ALARMPINCHED
|dischargedFully -> ALARMPINCHED
|plugOffToEmptyBattery -> ALARMPINCHED),
LOUDALARMPINCHED[e:ErrorsLine] = (
when (e<MaxErrors) errorPinched -> LOUDALARMPINCHED[e+1]
|when (e>1) reduceErrorPinched -> LOUDALARMPINCHED[e-1]
|when (e==1) reduceErrorPinched -> SILENCEALARMPINCHED
|turnOff -> ALARMPINCHED
|dischargedFully -> ALARMPINCHED
|plugOffToEmptyBattery -> ALARMPINCHED).

ALARMPLUGGED = (turnOn -> SILENCEALARMPLUGGED),
SILENCEALARMPLUGGED = (errorPlugged -> LOUDALARMPLUGGED[1]
|turnOff -> ALARMPLUGGED
|dischargedFully -> ALARMPLUGGED
|plugOffToEmptyBattery -> ALARMPLUGGED),
LOUDALARMPLUGGED[e:ErrorsLine] = (
when (e<MaxErrors) errorPlugged -> LOUDALARMPLUGGED[e+1]
|when (e>1) reduceErrorPlugged -> LOUDALARMPLUGGED[e-1]
|when (e==1) reduceErrorPlugged -> SILENCEALARMPLUGGED
|turnOff -> ALARMPLUGGED
|dischargedFully -> ALARMPLUGGED
|plugOffToEmptyBattery -> ALARMPLUGGED).

ALARMBATTERY = (turnOn -> SILENCEALARMBATTERY),
SILENCEALARMBATTERY = (errorBattery -> LOUDALARMBATTERY[1]
|turnOff -> ALARMBATTERY
|dischargedFully -> ALARMBATTERY
|plugOffToEmptyBattery -> ALARMBATTERY),
LOUDALARMBATTERY[e:ErrorsLine] = (
when (e<MaxErrors) errorBattery -> LOUDALARMBATTERY[e+1]
|when (e>1) reduceErrorBattery -> LOUDALARMBATTERY[e-1]
|when (e==1) reduceErrorBattery -> SILENCEALARMBATTERY
|dischargedFully -> ALARMBATTERY
|plugOffToEmptyBattery -> ALARMBATTERY
|turnOff -> ALARMBATTERY).


const MaxFluid = 10
range Volume = 0..MaxFluid

//Rate set
const LineOff = -1 //pump is off
const NotSet = 0
const MinRate = 1
const MaxRate = 2
range Rate = LineOff..MaxRate

//Assumption - if rate equals 3, we will not send only 2
//Assumption - if line has  2 problems(e.g. pinched and unplugged) then when pinched would be resolved Line firstly would go
//to status LineOk and then to Unplugged.This process would flow automatically.
//Assumption - if you could dispense 1 medicine and you change the mode to 2 medicine (in other word, if rate is more than volume), medicine ended would happen and you will need to refill
// Refill line1 after medicine ended kills ability to refill line 2
LINE = L[MaxFluid][LineOff],
L[f:Volume][r:Rate] = (
refill -> L[MaxFluid][r]
|when (r == -1) turnOn -> L[f][NotSet] 
|when (f > r-1 && r > 0) dispense -> L[f-r][r]
|when (f < r) medicineEnded -> refillAfterError -> L[MaxFluid][r] //поставить приоритет этого действия
|refill-> L[MaxFluid][r] //refill2 - because it should be different with refill, because refill is concurrent with reduce from LOUDALARM
|when (r > 0) pinched -> unpinched -> L[f][r]
|when (r > 0) unplugged -> plugged -> L[f][r]
|when (r > -1) turnOff -> L[f][LineOff]
|when (r > -1) dischargedFully -> L[f][LineOff]
|when (r > -1) plugOffToEmptyBattery -> L[f][LineOff]
|when (r > 0) stopLine -> L[f][NotSet] 
|when (r > -1) modifySettings -> setRate[rNew:MinRate..MaxRate] -> L[f][rNew] 
).
||EVERYTHING = (PUMP || line[1..2]:LINE || line[1..2]:ALARMMEDICINE || line[1..2]:ALARMPINCHED || line[1..2]:ALARMPLUGGED
 || line[1..2]:SAFE_DISPENSE)  // ||line[1..2]:Settings_Before_Dispense)
/{forall[i:RangeLine]  
{
turnOn/line[i].turnOn,
turnOff/line[i].turnOff,
dischargedFully/line[i].dischargedFully,
plugOffToEmptyBattery/line[i].plugOffToEmptyBattery,
line[i].medicineEnded/line[i].errorMedicine,
line[i].refillAfterError/line[i].reduceErrorMedicine,
line[i].pinched/line[i].errorPinched,
line[i].unpinched/line[i].reduceErrorPinched,
line[i].unplugged/line[i].errorPlugged,
line[i].plugged/line[i].reduceErrorPlugged
}}.

fluent PUMPISON = <turnOn,turnOff>
assert PUMPONOFF = <> PUMPISON
fluent PINCHED = <line[i:RangeLine].pinched,line[i:RangeLine].unpinched>
assert COULDPINCHED = [](PINCHED -> <> ! PINCHED)

//Artur
//1.The pump cannot start pumping without the operator first confirming the settings on the pump.

//Artur
//2.Electrical power can fail at any time.

//Nikita
//3.If the backup battery power fails, pumping will not occur on any line.
fluent DISCHARGED = <dischargedFully, {charge, changeBattery}>
assert NODISPENSE = []!(<>DISCHARGED -> X dispense)

//Nikita
//4.It is always possible to resume pumping after a failure.
fluent MEDICINE_ENDED = <medicineEnded, refillAfterError>

//Aleksandr
//5.An alarm will sound on any line failure (blockage, pinching, empty fluid, or
//whatever failures you model)
property SAFE_DISPENSE    
=(medicineEnded->refillAfterError -> SAFE_DISPENSE).

//Aleksandr
//6. In the absence of errors the pump will continue to pump until the
// treatment is finished.
fluent MEDICINE_ENDED = <medicineEnded, refillAfterError>
assert PUMPING_MEDICINE = [](dispense U MEDICINE_ENDED)

//7.Artem. The system never deadlocks.(done)

//8.Artem. (two properties)

// ASK TAs
//property Settings_Before_Dispense    
//=(setRate[rNew:MinRate..MaxRate] -> (dispense -> Settings_Before_Dispense | setRate[r2New:MinRate..MaxRate] ->Settings_Before_Dispense )).

// ASK TAs
//=(line[i:RangeLine].setRate[1..MaxRate]->line[i].dispense -> SAFE_DISPENCE).
//=(line[i:RangeLine].medicineEnded->alarm -> line[i].refill  ->SAFE_DISPENCE).

// Liveness property
progress DISPENSE = {turnOn}
