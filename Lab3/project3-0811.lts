const LineNum = 2
range RangeLine = 1..LineNum
const MaxFluid = 10
range FluidRange = 1..MaxFluid

const Normal = 0
const Error1 = 1
const Error2 = 2
 
range ErrorTypes = Normal..Error2
// 0-Pump has no errors
// 1-Error 1
// 2-Error 2
// 3-Error 3
// 4-Error 4
// 5-Error 5

//
// States of power source
// Assumption: 20% of battery is enough for 4 hours of working 
// (according to requirements from 
// "Generic Infusion Pump Hazard Analysis and Safety Requirements")
//
const Electricity = 0 	// Pump uses AC power
const Battery = 1 	// Battery mode
range PowerMode = Electricity .. Battery

const FullBattery = 0 	// Pump uses battery with charge is enough for more than 4 hours
const LowBattery = 1 	// Pump uses battery with charge is enough for less than 4 hours
const EmptyBattery = 2 	// Battery is empty
range BatteryMode = FullBattery .. EmptyBattery

//ASSUMPTION if we will add new battery, it will momentarily goes from empty 
Battery = B[FullBattery],
B[s:BatteryMode]=
(//LowBattery
when (s == LowBattery) charge -> B[FullBattery]
|when (s == LowBattery) discharge -> B[EmptyBattery]
|when (s == LowBattery) change_battery -> B[FullBattery]
//EmptyBattery
|when (s == EmptyBattery) charge -> B[LowBattery]
|when (s == EmptyBattery) discharge -> B[EmptyBattery]
|when (s == EmptyBattery) change_battery -> B[FullBattery]
//FullBattery
|when (s == FullBattery) charge -> B[FullBattery]
|when (s == FullBattery) discharge -> B[LowBattery]
|when (s == FullBattery) change_battery -> B[FullBattery]
).

//initial state
PUMP = P[Electricity][Normal],
//initial state

P[p:PowerMode][e:ErrorTypes] = (
changepowermode -> (
when (p==Electricity) -> P[Battery][e]
|
when (p==Battery) -> P[Electricity][e]
)). 


//LINE = (set_rate -> enter_value -> connect_set -> purge_air -> lock_line -> PUSH_FLUIDS[A]),
//PUSH_FLUIDS[v:FluidRange] = (when(v>0)dispense -> PUSH_FLUIDS[v-1]|when(v==0)alarm -> PUSH_FLUIDS[v]).



//||PUMPWORK  = (line[RangeLine]:LINE).

