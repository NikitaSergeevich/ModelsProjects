Prose for Group Project 3

Task 1. Description of the model

Level of abstraction
Below, [A1*] means that it is an assumption that will be used further and [A1] means that it is a reference for the assumption #1 marked by asterisk.

We have found that one of the most important problems can happen with power mode changing, from electricity to battery or vice versa. In our specification, pump can not work from electricity while it is not plugged in. According to description, pump is a life critical object.Therefore, in our model it would work normally after electrical failure. It would automatically start work from the battery, if only battery has discharged fully.We’ve added  current volume of fluids into each line. Alarm would inform the medicine officer that fluids ended because according to the description it is life critical problem when pump runs out of medicine. If the pump doesn’t have a power at all (not AC, empty battery), special simple backup alarm works (like a beeper in PC, it powers from additional small battery that is not able to give power to other pump’s components) [A1*]. We included in our specification problems of line, such as pinched and plugged because according to statistics of pump working it is common problem of pumps, which could be an obstacle for delivering medicine. Also according to pump description the medicine officer should be informed about the low level of battery, what we included as an additional state. Before starting to deliver medicine, we check if line was installed by setting status line locked unlocked, locked means it is correctly installed. According to description of pump patient need different amount of medicine at one time. To resolve this problem we added the rate for our model which control the speed of delivering medicine.We decided to make only a full refillment for the model, because each discrete volume value for refillment will take additional action and even with 5 levels of volume for 2 lines, there will be 10 additional actions that will complicate work with the model.

Regarding to all above, we decided to consider next main parts of a pump: 
\begin{itemize}
	\item Power state. Pump may be connected or not connected to AC. In the same time, electrical failure may occur and, according to level of abstraction, it will be the same that pump were plugged off from AC. In addition, power state includes current battery level and information about the overall pump state: is it On or Off.
	\item Independent lines. Two infusion lines inside of the pump works independently and settings should be made for each of them. Each line has its volume with some level of fluids. 
	\item Settings. The main setting in the pump is a rate with which each of the lines works. It is possible that only one line is working at the moment. Therefore, we’ve put the rate adjustments into the $Line$ process.
	\item Alarms. There are different alarms that shows problems in the pump. There are audio-visual alarms for different types of problems for each line, so they may work simultaneously.There is a simple backup alarm that works in every state, even when pump is without the battery [A1].
\end{itemize}
Below is a more detailed description of the model divided into this logical parts.


Power System

First, pump may be turned on turned off using actions $turnOff$ or $turnOn$.
The pump knows state of electricity: is it connected or not. To minimize number of actions and make the model more understandable we decided to not divide states when pump is plugged off from the AC and when the electrical failure in the building happens, in both cases pump goes into the state that it works from the battery using $plugOff$ action.
In the same time, the pump knows what is the state of a battery that is inside it: $EmptyBattery$, $LowBattery$, $FullBattery$. Battery may $charge$ only if the pump has an AC power and it is not full. Only when pump is not connected to AC (or if it is an electrical failure, what is the same for the pump), battery may $discharge$ (go to the lower level of charge) or $dischargeBatteryWhilePluggedOff$ (battery became empty when pump is working). In every case you can $changeBattery$ into the new one.
If the pump is in the battery mode and battery is empty, pump turns off and may start working only after $plugIn$ and then $charge$ actions are made or the $changeBattery$ action executed.

Line 

Line has amount of fluids (f) and rate of dispension (r). We decided to use r as variable which can show if dispension occurs in particular line or not. In initial state for every line we have r = -1 (LineOff) f = 10 (MaxFluids). r = -1 means that pump is actually switched off, line can’t dispense and user can’t apply settings until $turnOn$ action (which is synchronized with $PUMP$ process) will be performed. Action $turnOn$ will change r to 0 (NotSet). $NotSet$ means that now we can apply $modifySettings$ action to enter the menu and change available settings. In our model we can change only rate of dispension using action $setRate1$ / $setRate2$. After rate is set, dispension starts ($dispense$ action is available). Amount of dispension per time unit depends on selected rate (2 or 1). Important thing to notice is that dispension occurs independently on different lines in terms of timeline. During the dispension $medicineEnded$ action can become available when amount of fluids left (f) is less then must be dispensed during ongoing iteration. For example if amount of fluids left is 1 and rate is 2 then $medicineEnded$ action will be available instead of $dispense$. Action $medicineEnded$ is synchronized with ALARM process and will cause alarm sound and error. The same for actions $pinched$ and $plugged$, but the difference this event can occur at any time during the dispension. Our assumption here is line can become pinched or plugged only during the dispension and lines are not plugged or pinched initially. In case of ended medicine action $dispense$ will be available after performing $refillAfterError$ action. Also $refill$ action is available during the ordinary dispension in order to set amount of medicine (f) to 10 before it ends. Action $stopDispense$ is available during the dispension. Action  $emergencyDischarge$ is synchronized with BATTERY process and switch off the pump (r = LineOff). However if discharging of battery doesn’t lead to emergency, in the situation when pump is off $emergencyDischarge$ is not available. It happens when pump worked from battery and battery become discharged fully which prevents to emergency. Also action $plugOffToEmptyBattery$ happens when pump worked from electricity and user of pump(nurse) tried to plug off the pump when the battery is discharged which also leads to emergency. 

Alarms
In our specification there are four types of alarm which are related to each line: 1. shows when the line is pinched. 2. shows when the line is plugged. 3. shows when medicine in the line is ended and alarm notifies that the medicine bag should be refilled. 4. shows when emergency pump tuning off  happened: two possible variants - plugging off when battery is  empty or discharging battery from low battery to empty battery, when pump worked from the battery. (If electrical failure would happen we assumed that pump would automatically starts working from the battery). Errors 1-3 are connected with lines as a result pump identifies in which line error happened. We decided, that it would be convenient for nurse to identify different types of alarms and actually in which line it happened, in order to safe time of fixing the error.  Also, errors 1-3 are connected with power mode. When pump is turned off 1-3 alarms would also turned off. We assumed that when pump would be turned on, they would occur again automatically. If electrical failure would happen and pump would emergency be turned off, backup alarm would identify this failure. We assumed that backup alarm works even if there are no electricity in the pump.
All alarms have mode to MuteAlarm, in order when nurse saw the problem and doesn’t want to be disturbed by alarm. And all alarms have action alarm, which would happen until the error would not be fixed.

User interface
The only setting that is shown in our model is a rate setting.  Rate for each line has to be set independently, so a line can not start dispensing medicine before the rate will be set. Every dispense takes  amount of medicine that is set in the current rate of this line. Also each of the line could be stopped dispensing $stopDispense$ action in order to stop dispense in one line and continue dispense at another.



