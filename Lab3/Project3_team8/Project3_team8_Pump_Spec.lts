// Custom menu that shows actioons that pump user can perform
menu ControlMenu = 
{turnOn, turnOff, plugIn, plugOff, changeBattery, muteMedicineAlarm, emergencyPlugOff,
line[i:1..LineNum].refill, line[i:1..LineNum].refillAfterError, line[i:1..LineNum].stopDispense, 
dispense, line[i:1..LineNum].setRate[MinRate..MaxRate],
line[i:1..LineNum].unpinched, line[i:1..LineNum].unplugged,
line[i:1..LineNum].muteMedicineAlarm, line[i:1..LineNum].mutePinchedAlarm, line[i:1..LineNum].mutePluggedAlarm}

const LineNum = 2
range RangeLine = 1..LineNum

// Assumption 1: 20% of battery is enough for 4 hours of working 
// (according to requirements from 
// "Generic Infusion Pump Hazard Analysis and Safety Requirements")

const FullBattery = 2 	// Pump uses battery with charge is enough for more than 4 hours
const LowBattery = 1 	// Pump uses battery with charge is enough for less than 4 hours
const EmptyBattery = 0 	// Battery is empty
range BatteryMode =  EmptyBattery..FullBattery

const Electricity = 0 	// Pump uses AC power
const Battery = 1 	// Battery mode
range PowerMode = Electricity .. Battery

//Assumption 2. When we change the battery, the battery is fully charged.

POWERSUPPLY = TURNEDOFF[Battery][FullBattery],  //initial state

TURNEDOFF[p:PowerMode][b:BatteryMode] = 
(when (p==Electricity || b > 0) turnOn -> P[p][b]
|when (p==Electricity) plugOff -> TURNEDOFF[Battery][b]
|when (p==Battery) plugIn -> TURNEDOFF[Electricity][b]

//LowBattery
|when (p==Electricity && b == LowBattery) charge -> TURNEDOFF[p][LowBattery]
|when (p==Battery && b == LowBattery) discharge -> TURNEDOFF[p][EmptyBattery]
|when (b == LowBattery) changeBattery ->  TURNEDOFF[p][FullBattery]
//EmptyBattery
|when (p==Electricity && b == EmptyBattery) charge ->  TURNEDOFF[p][LowBattery]
|when (b == EmptyBattery) changeBattery ->  TURNEDOFF[p][FullBattery]
//FullBattery
|when (p==Battery && b == FullBattery) discharge ->  TURNEDOFF[p][LowBattery]
|when (b == FullBattery) changeBattery ->  TURNEDOFF[p][FullBattery]
),

P[p:PowerMode][b:BatteryMode] = (
// Change power mode
when (p==Electricity && b == EmptyBattery) emergencyPlugOff -> TURNEDOFF[Battery][b]
|when (p==Electricity && b != EmptyBattery) plugOff -> P[Battery][b]
|when (p==Battery) plugIn-> P[Electricity][b]
//OnOff. Different actions in order to make shared actions
|turnOff -> TURNEDOFF[p][b]
//LowBattery
|when (p==Electricity && b == LowBattery) charge -> P[p][LowBattery]
|when (p==Battery && b == LowBattery) emergencyDischarge  -> TURNEDOFF[p][EmptyBattery]
|when (b == LowBattery) changeBattery ->  P[p][FullBattery]
//EmptyBattery
|when (p==Electricity && b == EmptyBattery) charge ->  P[p][LowBattery]
|when (b == EmptyBattery) changeBattery ->  P[p][FullBattery]
//FullBattery
|when (p!=Electricity && b == FullBattery) discharge ->  P[p][LowBattery]
|when (b == FullBattery) changeBattery ->  P[p][FullBattery]
)
. 

//Number of errors which can occur in the line
const NoErrors = 1
const MaxErrors = 2
range Errors = NoErrors..MaxErrors

ALARMMEDICINE = (turnOn -> ALARMMEDICINEOFF),
ALARMMEDICINEOFF = (errorMedicine -> ALARMMEDICINEON
|turnOff -> ALARMMEDICINE
|emergencyDischarge -> ALARMMEDICINE
|emergencyPlugOff -> ALARMMEDICINE
 ),
ALARMMEDICINEON = (
medicineAlarm -> ALARMMEDICINEON
//reduced means error fixed
|reduceErrorMedicine -> ALARMMEDICINEOFF
|muteMedicineAlarm -> ALARMMEDICINEMUTED
|turnOff -> ALARMMEDICINE
|emergencyDischarge -> ALARMMEDICINE
|emergencyPlugOff -> ALARMMEDICINE
),
ALARMMEDICINEMUTED = (
//reduced means error fixed
reduceErrorMedicine -> ALARMMEDICINEOFF
|turnOff -> ALARMMEDICINE
|emergencyDischarge -> ALARMMEDICINE
|emergencyPlugOff -> ALARMMEDICINE)
.

ALARMPINCHED = (turnOn -> ALARMPINCHEDOFF),
ALARMPINCHEDOFF = (errorPinched -> ALARMPINCHEDON
|turnOff -> ALARMPINCHED
|emergencyDischarge -> ALARMPINCHED
|emergencyPlugOff -> ALARMPINCHED),
ALARMPINCHEDON = (
pinchedAlarm -> ALARMPINCHEDON 
|mutePinchedAlarm -> ALARMPINCHEDMUTED
//reduced means error fixed
|reduceErrorPinched -> ALARMPINCHEDOFF
|turnOff -> ALARMPINCHED
|emergencyDischarge -> ALARMPINCHED
|emergencyPlugOff -> ALARMPINCHED),
ALARMPINCHEDMUTED = (
//reduced means error fixed
reduceErrorPinched -> ALARMPINCHEDOFF
|turnOff -> ALARMPINCHED
|emergencyDischarge -> ALARMPINCHED
|emergencyPlugOff -> ALARMPINCHED).

ALARMPLUGGED = (turnOn -> ALARMPLUGGEDOFF),
ALARMPLUGGEDOFF = (errorPlugged -> ALARMPLUGGEDON
|turnOff -> ALARMPLUGGED
|emergencyDischarge -> ALARMPLUGGED
|emergencyPlugOff -> ALARMPLUGGED),
ALARMPLUGGEDON = (
pluggedAlarm -> ALARMPLUGGEDON
|mutePluggedAlarm -> ALARMPLUGGEDMUTED
//reduced means error fixed
|reduceErrorPlugged -> ALARMPLUGGEDOFF
|turnOff -> ALARMPLUGGED
|emergencyDischarge -> ALARMPLUGGED
|emergencyPlugOff -> ALARMPLUGGED),
ALARMPLUGGEDMUTED = (
//reduced means error fixed
reduceErrorPlugged -> ALARMPLUGGEDOFF
|turnOff -> ALARMPLUGGED
|emergencyDischarge -> ALARMPLUGGED
|emergencyPlugOff -> ALARMPLUGGED).

//Assumption 3. Backup alarm is not related with power supply of the pump.

BACKUPALARM = BACKUPALARMOFF,
BACKUPALARMOFF = (
emergencyTurnOff -> BACKUPALARMON
|electricalFailureFixed -> BACKUPALARMOFF
),
BACKUPALARMON = (
backupAlarm -> BACKUPALARMON
|electricalFailureFixed -> BACKUPALARMOFF
).

const MaxFluid = 10
range Volume = 0..MaxFluid

//Rate set
const LineOff = -1 //pump is off
const NotSet = 0
const MinRate = 1
const MaxRate = 2
range Rate = LineOff..MaxRate

//Assumption 4. If rate equals 2 and volume equals 1. Medicine would not be dispensed.
//Assumption 5. If line has 2 problems(e.g. pinched and unplugged) then when pinched error would be resolved line would identify unplugged error. 
//We assume that this consequence of steps would flow automatically.
LINE = L[MaxFluid][LineOff],
L[f:Volume][r:Rate] = (
refill -> L[MaxFluid][r]
|when (r == -1) turnOn -> L[f][NotSet] 
|when (f > r-1 && r > 0) dispense -> L[f-r][r]
|when (f < r) medicineEnded -> refillAfterError -> L[MaxFluid][r] //поставить приоритет этого действия
|refill-> L[MaxFluid][r] //refill2 - because it should be different with refill, because refill is concurrent with reduce from LOUDALARM
|when (r > 0) pinched -> unpinched -> L[f][r]
|when (r > 0) plugged -> unplugged -> L[f][r]
|when (r > -1) turnOff -> L[f][LineOff]
|when (r > -1) emergencyDischarge -> L[f][LineOff]
|when (r > -1) emergencyPlugOff -> L[f][LineOff]
|when (r > 0) stopDispense -> L[f][NotSet] 
|when (r > -1) setRate[rNew:MinRate..MaxRate] -> L[f][rNew] 
).

// line[RangeLine] is used in every processes connected to lines to make the sinchronisation
// using relabelling easier - there are less relabellings needed
||PUMP = (POWERSUPPLY || line[RangeLine]:LINE || line[RangeLine]:ALARMMEDICINE || line[RangeLine]:ALARMPINCHED || line[RangeLine]:ALARMPLUGGED || BACKUPALARM)
/{forall[i:RangeLine]  
{
turnOn/line[i].turnOn,
turnOff/line[i].turnOff,
emergencyDischarge/line[i].emergencyDischarge,
emergencyPlugOff/line[i].emergencyPlugOff,
line[i].medicineEnded/line[i].errorMedicine,
line[i].refillAfterError/line[i].reduceErrorMedicine,
line[i].pinched/line[i].errorPinched,
line[i].unpinched/line[i].reduceErrorPinched,
line[i].plugged/line[i].errorPlugged,
line[i].unplugged/line[i].reduceErrorPlugged,
emergencyDischarge/emergencyTurnOff,
emergencyPlugOff/emergencyTurnOff,
plugIn/electricalFailureFixed,
changeBattery/electricalFailureFixed
}}
.

//1.The pump cannot start pumping without the operator first confirming the settings on the pump.
fluent SETTINGS_ARE_SET[i:RangeLine] = <line[i].setRate[j:MinRate..MaxRate], {turnOff, emergencyPlugOff, emergencyDischarge}>
assert DISPENSE_ONLY_AFTER_SETTINGS = forall[i:RangeLine] [](line[i].dispense -> SETTINGS_ARE_SET[i])

//2.Electrical power can fail at any time.
assert ELECTRICAL_FAILURE_AT_ANY_TIME = []<> plugOff

//3.If the backup battery power fails, pumping will not occur on any line.
fluent DISCHARGED = <{emergencyPlugOff, emergencyDischarge}, {changeBattery, plugIn}>
assert NODISPENSE = [](DISCHARGED -> !line[i:RangeLine].dispense)

//4.It is always possible to resume pumping after a failure.
fluent MEDICINE_ENDED[i:RangeLine] = <line[i].medicineEnded, line[i].refillAfterError>
fluent PINCHED[i:RangeLine] = <line[i].pinched, line[i].unpinched>
fluent PLUGGED[i:RangeLine] = <line[i].plugged, line[i].unplugged>
assert RESUMEDISPENCE = forall[i:RangeLine]
[](MEDICINE_ENDED[i] -> <> line[i].dispense
|| PINCHED[i] -> <> line[i].dispense
|| PLUGGED[i] -> <> line[i].dispense
|| DISCHARGED -> <> line[i].dispense
)

//5.An alarm will sound on any line failure (blockage, pinching, empty fluid, or
//whatever failures you model)
assert FAILURE_ALARM = forall[i:RangeLine] 
[] (MEDICINE_ENDED[i] -> <> line[i].medicineAlarm 
|| PINCHED[i] -> <> line[i].pinchedAlarm
|| PLUGGED[i] -> <> line[i].pluggedAlarm
|| DISCHARGED -> <> backupAlarm
)

//6. In the absence of errors the pump will continue to pump until the
// treatment is finished.
assert PUMPING_MEDICINE = forall[i:RangeLine] []((!DISCHARGED && !PINCHED[i] && !PLUGGED[i] -> <>line[i].dispense) U MEDICINE_ENDED[i])

//7. The main action, dispense, may be made infinitely often (there is no irreversible problems)
assert INFINITE_DISPENSE = []<> line[i:RangeLine].dispense

//8. More specific version: if there is necessary amount of medicine, dispense, may be made infinitely often (there is no irreversible problems)
fluent ENOUGH_MEDICINE[i:RangeLine] = <{line[i].refillAfterError, line[i].refill}, line[i].medicineEnded>
assert CONTINUE_DISPENSING = forall[i:RangeLine] [](ENOUGH_MEDICINE[i] -> [] <>line[i].dispense)

//9. Battery can not charge if the pump is not connected to AC
fluent PUMP_CONNECTED_TO_AC = <plugIn, {plugOff, plugOffToEmptyBattery}>
assert CHARGE_ONLY_FROM_BATTERY  = (charge -> ! PUMP_CONNECTED_TO_AC )


